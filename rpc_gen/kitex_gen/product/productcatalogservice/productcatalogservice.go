// Code generated by Kitex v0.9.1. DO NOT EDIT.

package productcatalogservice

import (
	"context"
	"errors"
	product "github.com/Vigor-Team/youthcamp-2025-mall-be/rpc_gen/kitex_gen/product"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"AddProduct": kitex.NewMethodInfo(
		addProductHandler,
		newAddProductArgs,
		newAddProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateProduct": kitex.NewMethodInfo(
		updateProductHandler,
		newUpdateProductArgs,
		newUpdateProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteProduct": kitex.NewMethodInfo(
		deleteProductHandler,
		newDeleteProductArgs,
		newDeleteProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"OnlineProduct": kitex.NewMethodInfo(
		onlineProductHandler,
		newOnlineProductArgs,
		newOnlineProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"OfflineProduct": kitex.NewMethodInfo(
		offlineProductHandler,
		newOfflineProductArgs,
		newOfflineProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListProducts": kitex.NewMethodInfo(
		listProductsHandler,
		newListProductsArgs,
		newListProductsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetProduct": kitex.NewMethodInfo(
		getProductHandler,
		newGetProductArgs,
		newGetProductResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"BatchGetProducts": kitex.NewMethodInfo(
		batchGetProductsHandler,
		newBatchGetProductsArgs,
		newBatchGetProductsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SearchProducts": kitex.NewMethodInfo(
		searchProductsHandler,
		newSearchProductsArgs,
		newSearchProductsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetCategories": kitex.NewMethodInfo(
		getCategoriesHandler,
		newGetCategoriesArgs,
		newGetCategoriesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetCategory": kitex.NewMethodInfo(
		getCategoryHandler,
		newGetCategoryArgs,
		newGetCategoryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DecrStock": kitex.NewMethodInfo(
		decrStockHandler,
		newDecrStockArgs,
		newDecrStockResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"IncrStock": kitex.NewMethodInfo(
		incrStockHandler,
		newIncrStockArgs,
		newIncrStockResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	productCatalogServiceServiceInfo                = NewServiceInfo()
	productCatalogServiceServiceInfoForClient       = NewServiceInfoForClient()
	productCatalogServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return productCatalogServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return productCatalogServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return productCatalogServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ProductCatalogService"
	handlerType := (*product.ProductCatalogService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "product",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func addProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.AddProductReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductCatalogService).AddProduct(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *AddProductArgs:
		success, err := handler.(product.ProductCatalogService).AddProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddProductResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newAddProductArgs() interface{} {
	return &AddProductArgs{}
}

func newAddProductResult() interface{} {
	return &AddProductResult{}
}

type AddProductArgs struct {
	Req *product.AddProductReq
}

func (p *AddProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.AddProductReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AddProductArgs) Unmarshal(in []byte) error {
	msg := new(product.AddProductReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddProductArgs_Req_DEFAULT *product.AddProductReq

func (p *AddProductArgs) GetReq() *product.AddProductReq {
	if !p.IsSetReq() {
		return AddProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AddProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AddProductResult struct {
	Success *product.AddProductResp
}

var AddProductResult_Success_DEFAULT *product.AddProductResp

func (p *AddProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.AddProductResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AddProductResult) Unmarshal(in []byte) error {
	msg := new(product.AddProductResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddProductResult) GetSuccess() *product.AddProductResp {
	if !p.IsSetSuccess() {
		return AddProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.AddProductResp)
}

func (p *AddProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddProductResult) GetResult() interface{} {
	return p.Success
}

func updateProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.UpdateProductReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductCatalogService).UpdateProduct(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateProductArgs:
		success, err := handler.(product.ProductCatalogService).UpdateProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateProductResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateProductArgs() interface{} {
	return &UpdateProductArgs{}
}

func newUpdateProductResult() interface{} {
	return &UpdateProductResult{}
}

type UpdateProductArgs struct {
	Req *product.UpdateProductReq
}

func (p *UpdateProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.UpdateProductReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateProductArgs) Unmarshal(in []byte) error {
	msg := new(product.UpdateProductReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateProductArgs_Req_DEFAULT *product.UpdateProductReq

func (p *UpdateProductArgs) GetReq() *product.UpdateProductReq {
	if !p.IsSetReq() {
		return UpdateProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateProductResult struct {
	Success *product.UpdateProductResp
}

var UpdateProductResult_Success_DEFAULT *product.UpdateProductResp

func (p *UpdateProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.UpdateProductResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateProductResult) Unmarshal(in []byte) error {
	msg := new(product.UpdateProductResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateProductResult) GetSuccess() *product.UpdateProductResp {
	if !p.IsSetSuccess() {
		return UpdateProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.UpdateProductResp)
}

func (p *UpdateProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateProductResult) GetResult() interface{} {
	return p.Success
}

func deleteProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.DeleteProductReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductCatalogService).DeleteProduct(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteProductArgs:
		success, err := handler.(product.ProductCatalogService).DeleteProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteProductResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteProductArgs() interface{} {
	return &DeleteProductArgs{}
}

func newDeleteProductResult() interface{} {
	return &DeleteProductResult{}
}

type DeleteProductArgs struct {
	Req *product.DeleteProductReq
}

func (p *DeleteProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.DeleteProductReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteProductArgs) Unmarshal(in []byte) error {
	msg := new(product.DeleteProductReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteProductArgs_Req_DEFAULT *product.DeleteProductReq

func (p *DeleteProductArgs) GetReq() *product.DeleteProductReq {
	if !p.IsSetReq() {
		return DeleteProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteProductResult struct {
	Success *product.DeleteProductResp
}

var DeleteProductResult_Success_DEFAULT *product.DeleteProductResp

func (p *DeleteProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.DeleteProductResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteProductResult) Unmarshal(in []byte) error {
	msg := new(product.DeleteProductResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteProductResult) GetSuccess() *product.DeleteProductResp {
	if !p.IsSetSuccess() {
		return DeleteProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.DeleteProductResp)
}

func (p *DeleteProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteProductResult) GetResult() interface{} {
	return p.Success
}

func onlineProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.OnlineProductReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductCatalogService).OnlineProduct(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *OnlineProductArgs:
		success, err := handler.(product.ProductCatalogService).OnlineProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*OnlineProductResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newOnlineProductArgs() interface{} {
	return &OnlineProductArgs{}
}

func newOnlineProductResult() interface{} {
	return &OnlineProductResult{}
}

type OnlineProductArgs struct {
	Req *product.OnlineProductReq
}

func (p *OnlineProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.OnlineProductReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *OnlineProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *OnlineProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *OnlineProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *OnlineProductArgs) Unmarshal(in []byte) error {
	msg := new(product.OnlineProductReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var OnlineProductArgs_Req_DEFAULT *product.OnlineProductReq

func (p *OnlineProductArgs) GetReq() *product.OnlineProductReq {
	if !p.IsSetReq() {
		return OnlineProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *OnlineProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OnlineProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type OnlineProductResult struct {
	Success *product.OnlineProductResp
}

var OnlineProductResult_Success_DEFAULT *product.OnlineProductResp

func (p *OnlineProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.OnlineProductResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *OnlineProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *OnlineProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *OnlineProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *OnlineProductResult) Unmarshal(in []byte) error {
	msg := new(product.OnlineProductResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *OnlineProductResult) GetSuccess() *product.OnlineProductResp {
	if !p.IsSetSuccess() {
		return OnlineProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *OnlineProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.OnlineProductResp)
}

func (p *OnlineProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OnlineProductResult) GetResult() interface{} {
	return p.Success
}

func offlineProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.OfflineProductReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductCatalogService).OfflineProduct(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *OfflineProductArgs:
		success, err := handler.(product.ProductCatalogService).OfflineProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*OfflineProductResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newOfflineProductArgs() interface{} {
	return &OfflineProductArgs{}
}

func newOfflineProductResult() interface{} {
	return &OfflineProductResult{}
}

type OfflineProductArgs struct {
	Req *product.OfflineProductReq
}

func (p *OfflineProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.OfflineProductReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *OfflineProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *OfflineProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *OfflineProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *OfflineProductArgs) Unmarshal(in []byte) error {
	msg := new(product.OfflineProductReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var OfflineProductArgs_Req_DEFAULT *product.OfflineProductReq

func (p *OfflineProductArgs) GetReq() *product.OfflineProductReq {
	if !p.IsSetReq() {
		return OfflineProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *OfflineProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OfflineProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type OfflineProductResult struct {
	Success *product.OfflineProductResp
}

var OfflineProductResult_Success_DEFAULT *product.OfflineProductResp

func (p *OfflineProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.OfflineProductResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *OfflineProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *OfflineProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *OfflineProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *OfflineProductResult) Unmarshal(in []byte) error {
	msg := new(product.OfflineProductResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *OfflineProductResult) GetSuccess() *product.OfflineProductResp {
	if !p.IsSetSuccess() {
		return OfflineProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *OfflineProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.OfflineProductResp)
}

func (p *OfflineProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OfflineProductResult) GetResult() interface{} {
	return p.Success
}

func listProductsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.ListProductsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductCatalogService).ListProducts(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListProductsArgs:
		success, err := handler.(product.ProductCatalogService).ListProducts(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListProductsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListProductsArgs() interface{} {
	return &ListProductsArgs{}
}

func newListProductsResult() interface{} {
	return &ListProductsResult{}
}

type ListProductsArgs struct {
	Req *product.ListProductsReq
}

func (p *ListProductsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.ListProductsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListProductsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListProductsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListProductsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListProductsArgs) Unmarshal(in []byte) error {
	msg := new(product.ListProductsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListProductsArgs_Req_DEFAULT *product.ListProductsReq

func (p *ListProductsArgs) GetReq() *product.ListProductsReq {
	if !p.IsSetReq() {
		return ListProductsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListProductsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListProductsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListProductsResult struct {
	Success *product.ListProductsResp
}

var ListProductsResult_Success_DEFAULT *product.ListProductsResp

func (p *ListProductsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.ListProductsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListProductsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListProductsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListProductsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListProductsResult) Unmarshal(in []byte) error {
	msg := new(product.ListProductsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListProductsResult) GetSuccess() *product.ListProductsResp {
	if !p.IsSetSuccess() {
		return ListProductsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListProductsResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.ListProductsResp)
}

func (p *ListProductsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListProductsResult) GetResult() interface{} {
	return p.Success
}

func getProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.GetProductReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductCatalogService).GetProduct(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetProductArgs:
		success, err := handler.(product.ProductCatalogService).GetProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetProductResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetProductArgs() interface{} {
	return &GetProductArgs{}
}

func newGetProductResult() interface{} {
	return &GetProductResult{}
}

type GetProductArgs struct {
	Req *product.GetProductReq
}

func (p *GetProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.GetProductReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetProductArgs) Unmarshal(in []byte) error {
	msg := new(product.GetProductReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetProductArgs_Req_DEFAULT *product.GetProductReq

func (p *GetProductArgs) GetReq() *product.GetProductReq {
	if !p.IsSetReq() {
		return GetProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetProductResult struct {
	Success *product.GetProductResp
}

var GetProductResult_Success_DEFAULT *product.GetProductResp

func (p *GetProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.GetProductResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetProductResult) Unmarshal(in []byte) error {
	msg := new(product.GetProductResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetProductResult) GetSuccess() *product.GetProductResp {
	if !p.IsSetSuccess() {
		return GetProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.GetProductResp)
}

func (p *GetProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetProductResult) GetResult() interface{} {
	return p.Success
}

func batchGetProductsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.BatchGetProductsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductCatalogService).BatchGetProducts(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *BatchGetProductsArgs:
		success, err := handler.(product.ProductCatalogService).BatchGetProducts(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*BatchGetProductsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newBatchGetProductsArgs() interface{} {
	return &BatchGetProductsArgs{}
}

func newBatchGetProductsResult() interface{} {
	return &BatchGetProductsResult{}
}

type BatchGetProductsArgs struct {
	Req *product.BatchGetProductsReq
}

func (p *BatchGetProductsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.BatchGetProductsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *BatchGetProductsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *BatchGetProductsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *BatchGetProductsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *BatchGetProductsArgs) Unmarshal(in []byte) error {
	msg := new(product.BatchGetProductsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var BatchGetProductsArgs_Req_DEFAULT *product.BatchGetProductsReq

func (p *BatchGetProductsArgs) GetReq() *product.BatchGetProductsReq {
	if !p.IsSetReq() {
		return BatchGetProductsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BatchGetProductsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BatchGetProductsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type BatchGetProductsResult struct {
	Success *product.BatchGetProductsResp
}

var BatchGetProductsResult_Success_DEFAULT *product.BatchGetProductsResp

func (p *BatchGetProductsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.BatchGetProductsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *BatchGetProductsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *BatchGetProductsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *BatchGetProductsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *BatchGetProductsResult) Unmarshal(in []byte) error {
	msg := new(product.BatchGetProductsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *BatchGetProductsResult) GetSuccess() *product.BatchGetProductsResp {
	if !p.IsSetSuccess() {
		return BatchGetProductsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *BatchGetProductsResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.BatchGetProductsResp)
}

func (p *BatchGetProductsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BatchGetProductsResult) GetResult() interface{} {
	return p.Success
}

func searchProductsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.SearchProductsReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductCatalogService).SearchProducts(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SearchProductsArgs:
		success, err := handler.(product.ProductCatalogService).SearchProducts(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SearchProductsResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSearchProductsArgs() interface{} {
	return &SearchProductsArgs{}
}

func newSearchProductsResult() interface{} {
	return &SearchProductsResult{}
}

type SearchProductsArgs struct {
	Req *product.SearchProductsReq
}

func (p *SearchProductsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.SearchProductsReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SearchProductsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SearchProductsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SearchProductsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SearchProductsArgs) Unmarshal(in []byte) error {
	msg := new(product.SearchProductsReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SearchProductsArgs_Req_DEFAULT *product.SearchProductsReq

func (p *SearchProductsArgs) GetReq() *product.SearchProductsReq {
	if !p.IsSetReq() {
		return SearchProductsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SearchProductsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SearchProductsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SearchProductsResult struct {
	Success *product.SearchProductsResp
}

var SearchProductsResult_Success_DEFAULT *product.SearchProductsResp

func (p *SearchProductsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.SearchProductsResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SearchProductsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SearchProductsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SearchProductsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SearchProductsResult) Unmarshal(in []byte) error {
	msg := new(product.SearchProductsResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SearchProductsResult) GetSuccess() *product.SearchProductsResp {
	if !p.IsSetSuccess() {
		return SearchProductsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SearchProductsResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.SearchProductsResp)
}

func (p *SearchProductsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SearchProductsResult) GetResult() interface{} {
	return p.Success
}

func getCategoriesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.GetCategoriesReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductCatalogService).GetCategories(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetCategoriesArgs:
		success, err := handler.(product.ProductCatalogService).GetCategories(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetCategoriesResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetCategoriesArgs() interface{} {
	return &GetCategoriesArgs{}
}

func newGetCategoriesResult() interface{} {
	return &GetCategoriesResult{}
}

type GetCategoriesArgs struct {
	Req *product.GetCategoriesReq
}

func (p *GetCategoriesArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.GetCategoriesReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetCategoriesArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetCategoriesArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetCategoriesArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetCategoriesArgs) Unmarshal(in []byte) error {
	msg := new(product.GetCategoriesReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetCategoriesArgs_Req_DEFAULT *product.GetCategoriesReq

func (p *GetCategoriesArgs) GetReq() *product.GetCategoriesReq {
	if !p.IsSetReq() {
		return GetCategoriesArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetCategoriesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetCategoriesArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetCategoriesResult struct {
	Success *product.GetCategoriesResp
}

var GetCategoriesResult_Success_DEFAULT *product.GetCategoriesResp

func (p *GetCategoriesResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.GetCategoriesResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetCategoriesResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetCategoriesResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetCategoriesResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetCategoriesResult) Unmarshal(in []byte) error {
	msg := new(product.GetCategoriesResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetCategoriesResult) GetSuccess() *product.GetCategoriesResp {
	if !p.IsSetSuccess() {
		return GetCategoriesResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetCategoriesResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.GetCategoriesResp)
}

func (p *GetCategoriesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetCategoriesResult) GetResult() interface{} {
	return p.Success
}

func getCategoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.GetCategoryReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductCatalogService).GetCategory(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetCategoryArgs:
		success, err := handler.(product.ProductCatalogService).GetCategory(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetCategoryResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetCategoryArgs() interface{} {
	return &GetCategoryArgs{}
}

func newGetCategoryResult() interface{} {
	return &GetCategoryResult{}
}

type GetCategoryArgs struct {
	Req *product.GetCategoryReq
}

func (p *GetCategoryArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.GetCategoryReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetCategoryArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetCategoryArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetCategoryArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetCategoryArgs) Unmarshal(in []byte) error {
	msg := new(product.GetCategoryReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetCategoryArgs_Req_DEFAULT *product.GetCategoryReq

func (p *GetCategoryArgs) GetReq() *product.GetCategoryReq {
	if !p.IsSetReq() {
		return GetCategoryArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetCategoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetCategoryArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetCategoryResult struct {
	Success *product.GetCategoryResp
}

var GetCategoryResult_Success_DEFAULT *product.GetCategoryResp

func (p *GetCategoryResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.GetCategoryResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetCategoryResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetCategoryResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetCategoryResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetCategoryResult) Unmarshal(in []byte) error {
	msg := new(product.GetCategoryResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetCategoryResult) GetSuccess() *product.GetCategoryResp {
	if !p.IsSetSuccess() {
		return GetCategoryResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetCategoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.GetCategoryResp)
}

func (p *GetCategoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetCategoryResult) GetResult() interface{} {
	return p.Success
}

func decrStockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.DecrStockReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductCatalogService).DecrStock(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DecrStockArgs:
		success, err := handler.(product.ProductCatalogService).DecrStock(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DecrStockResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDecrStockArgs() interface{} {
	return &DecrStockArgs{}
}

func newDecrStockResult() interface{} {
	return &DecrStockResult{}
}

type DecrStockArgs struct {
	Req *product.DecrStockReq
}

func (p *DecrStockArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.DecrStockReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DecrStockArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DecrStockArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DecrStockArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DecrStockArgs) Unmarshal(in []byte) error {
	msg := new(product.DecrStockReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DecrStockArgs_Req_DEFAULT *product.DecrStockReq

func (p *DecrStockArgs) GetReq() *product.DecrStockReq {
	if !p.IsSetReq() {
		return DecrStockArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DecrStockArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DecrStockArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DecrStockResult struct {
	Success *product.DecrStockResp
}

var DecrStockResult_Success_DEFAULT *product.DecrStockResp

func (p *DecrStockResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.DecrStockResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DecrStockResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DecrStockResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DecrStockResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DecrStockResult) Unmarshal(in []byte) error {
	msg := new(product.DecrStockResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DecrStockResult) GetSuccess() *product.DecrStockResp {
	if !p.IsSetSuccess() {
		return DecrStockResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DecrStockResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.DecrStockResp)
}

func (p *DecrStockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DecrStockResult) GetResult() interface{} {
	return p.Success
}

func incrStockHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.IncrStockReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductCatalogService).IncrStock(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *IncrStockArgs:
		success, err := handler.(product.ProductCatalogService).IncrStock(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*IncrStockResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newIncrStockArgs() interface{} {
	return &IncrStockArgs{}
}

func newIncrStockResult() interface{} {
	return &IncrStockResult{}
}

type IncrStockArgs struct {
	Req *product.IncrStockReq
}

func (p *IncrStockArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.IncrStockReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *IncrStockArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *IncrStockArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *IncrStockArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *IncrStockArgs) Unmarshal(in []byte) error {
	msg := new(product.IncrStockReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var IncrStockArgs_Req_DEFAULT *product.IncrStockReq

func (p *IncrStockArgs) GetReq() *product.IncrStockReq {
	if !p.IsSetReq() {
		return IncrStockArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *IncrStockArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IncrStockArgs) GetFirstArgument() interface{} {
	return p.Req
}

type IncrStockResult struct {
	Success *product.IncrStockResp
}

var IncrStockResult_Success_DEFAULT *product.IncrStockResp

func (p *IncrStockResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.IncrStockResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *IncrStockResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *IncrStockResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *IncrStockResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *IncrStockResult) Unmarshal(in []byte) error {
	msg := new(product.IncrStockResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *IncrStockResult) GetSuccess() *product.IncrStockResp {
	if !p.IsSetSuccess() {
		return IncrStockResult_Success_DEFAULT
	}
	return p.Success
}

func (p *IncrStockResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.IncrStockResp)
}

func (p *IncrStockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IncrStockResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddProduct(ctx context.Context, Req *product.AddProductReq) (r *product.AddProductResp, err error) {
	var _args AddProductArgs
	_args.Req = Req
	var _result AddProductResult
	if err = p.c.Call(ctx, "AddProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateProduct(ctx context.Context, Req *product.UpdateProductReq) (r *product.UpdateProductResp, err error) {
	var _args UpdateProductArgs
	_args.Req = Req
	var _result UpdateProductResult
	if err = p.c.Call(ctx, "UpdateProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteProduct(ctx context.Context, Req *product.DeleteProductReq) (r *product.DeleteProductResp, err error) {
	var _args DeleteProductArgs
	_args.Req = Req
	var _result DeleteProductResult
	if err = p.c.Call(ctx, "DeleteProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) OnlineProduct(ctx context.Context, Req *product.OnlineProductReq) (r *product.OnlineProductResp, err error) {
	var _args OnlineProductArgs
	_args.Req = Req
	var _result OnlineProductResult
	if err = p.c.Call(ctx, "OnlineProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) OfflineProduct(ctx context.Context, Req *product.OfflineProductReq) (r *product.OfflineProductResp, err error) {
	var _args OfflineProductArgs
	_args.Req = Req
	var _result OfflineProductResult
	if err = p.c.Call(ctx, "OfflineProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListProducts(ctx context.Context, Req *product.ListProductsReq) (r *product.ListProductsResp, err error) {
	var _args ListProductsArgs
	_args.Req = Req
	var _result ListProductsResult
	if err = p.c.Call(ctx, "ListProducts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetProduct(ctx context.Context, Req *product.GetProductReq) (r *product.GetProductResp, err error) {
	var _args GetProductArgs
	_args.Req = Req
	var _result GetProductResult
	if err = p.c.Call(ctx, "GetProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchGetProducts(ctx context.Context, Req *product.BatchGetProductsReq) (r *product.BatchGetProductsResp, err error) {
	var _args BatchGetProductsArgs
	_args.Req = Req
	var _result BatchGetProductsResult
	if err = p.c.Call(ctx, "BatchGetProducts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchProducts(ctx context.Context, Req *product.SearchProductsReq) (r *product.SearchProductsResp, err error) {
	var _args SearchProductsArgs
	_args.Req = Req
	var _result SearchProductsResult
	if err = p.c.Call(ctx, "SearchProducts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCategories(ctx context.Context, Req *product.GetCategoriesReq) (r *product.GetCategoriesResp, err error) {
	var _args GetCategoriesArgs
	_args.Req = Req
	var _result GetCategoriesResult
	if err = p.c.Call(ctx, "GetCategories", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCategory(ctx context.Context, Req *product.GetCategoryReq) (r *product.GetCategoryResp, err error) {
	var _args GetCategoryArgs
	_args.Req = Req
	var _result GetCategoryResult
	if err = p.c.Call(ctx, "GetCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DecrStock(ctx context.Context, Req *product.DecrStockReq) (r *product.DecrStockResp, err error) {
	var _args DecrStockArgs
	_args.Req = Req
	var _result DecrStockResult
	if err = p.c.Call(ctx, "DecrStock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IncrStock(ctx context.Context, Req *product.IncrStockReq) (r *product.IncrStockResp, err error) {
	var _args IncrStockArgs
	_args.Req = Req
	var _result IncrStockResult
	if err = p.c.Call(ctx, "IncrStock", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
