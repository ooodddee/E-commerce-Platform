// Code generated by Kitex v0.9.1. DO NOT EDIT.

package llmservice

import (
	"context"
	"errors"
	"fmt"
	llm "github.com/Vigor-Team/youthcamp-2025-mall-be/rpc_gen/kitex_gen/llm"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"SendMessage": kitex.NewMethodInfo(
		sendMessageHandler,
		newSendMessageArgs,
		newSendMessageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"StreamMessage": kitex.NewMethodInfo(
		streamMessageHandler,
		newStreamMessageArgs,
		newStreamMessageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingServer),
	),
	"GetHistory": kitex.NewMethodInfo(
		getHistoryHandler,
		newGetHistoryArgs,
		newGetHistoryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteHistory": kitex.NewMethodInfo(
		deleteHistoryHandler,
		newDeleteHistoryArgs,
		newDeleteHistoryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	llmServiceServiceInfo                = NewServiceInfo()
	llmServiceServiceInfoForClient       = NewServiceInfoForClient()
	llmServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return llmServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return llmServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return llmServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(true, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "LlmService"
	handlerType := (*llm.LlmService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "llm",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func sendMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(llm.ChatRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(llm.LlmService).SendMessage(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SendMessageArgs:
		success, err := handler.(llm.LlmService).SendMessage(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SendMessageResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSendMessageArgs() interface{} {
	return &SendMessageArgs{}
}

func newSendMessageResult() interface{} {
	return &SendMessageResult{}
}

type SendMessageArgs struct {
	Req *llm.ChatRequest
}

func (p *SendMessageArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(llm.ChatRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SendMessageArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SendMessageArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SendMessageArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SendMessageArgs) Unmarshal(in []byte) error {
	msg := new(llm.ChatRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SendMessageArgs_Req_DEFAULT *llm.ChatRequest

func (p *SendMessageArgs) GetReq() *llm.ChatRequest {
	if !p.IsSetReq() {
		return SendMessageArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SendMessageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SendMessageArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SendMessageResult struct {
	Success *llm.ChatResponse
}

var SendMessageResult_Success_DEFAULT *llm.ChatResponse

func (p *SendMessageResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(llm.ChatResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SendMessageResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SendMessageResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SendMessageResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SendMessageResult) Unmarshal(in []byte) error {
	msg := new(llm.ChatResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SendMessageResult) GetSuccess() *llm.ChatResponse {
	if !p.IsSetSuccess() {
		return SendMessageResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SendMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*llm.ChatResponse)
}

func (p *SendMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendMessageResult) GetResult() interface{} {
	return p.Success
}

func streamMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	streamingArgs, ok := arg.(*streaming.Args)
	if !ok {
		return errInvalidMessageType
	}
	st := streamingArgs.Stream
	stream := &llmServiceStreamMessageServer{st}
	req := new(llm.ChatRequest)
	if err := st.RecvMsg(req); err != nil {
		return err
	}
	return handler.(llm.LlmService).StreamMessage(req, stream)
}

type llmServiceStreamMessageClient struct {
	streaming.Stream
}

func (x *llmServiceStreamMessageClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *llmServiceStreamMessageClient) Recv() (*llm.ChatResponse, error) {
	m := new(llm.ChatResponse)
	return m, x.Stream.RecvMsg(m)
}

type llmServiceStreamMessageServer struct {
	streaming.Stream
}

func (x *llmServiceStreamMessageServer) Send(m *llm.ChatResponse) error {
	return x.Stream.SendMsg(m)
}

func newStreamMessageArgs() interface{} {
	return &StreamMessageArgs{}
}

func newStreamMessageResult() interface{} {
	return &StreamMessageResult{}
}

type StreamMessageArgs struct {
	Req *llm.ChatRequest
}

func (p *StreamMessageArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(llm.ChatRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *StreamMessageArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *StreamMessageArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *StreamMessageArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *StreamMessageArgs) Unmarshal(in []byte) error {
	msg := new(llm.ChatRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var StreamMessageArgs_Req_DEFAULT *llm.ChatRequest

func (p *StreamMessageArgs) GetReq() *llm.ChatRequest {
	if !p.IsSetReq() {
		return StreamMessageArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *StreamMessageArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StreamMessageArgs) GetFirstArgument() interface{} {
	return p.Req
}

type StreamMessageResult struct {
	Success *llm.ChatResponse
}

var StreamMessageResult_Success_DEFAULT *llm.ChatResponse

func (p *StreamMessageResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(llm.ChatResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *StreamMessageResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *StreamMessageResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *StreamMessageResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *StreamMessageResult) Unmarshal(in []byte) error {
	msg := new(llm.ChatResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *StreamMessageResult) GetSuccess() *llm.ChatResponse {
	if !p.IsSetSuccess() {
		return StreamMessageResult_Success_DEFAULT
	}
	return p.Success
}

func (p *StreamMessageResult) SetSuccess(x interface{}) {
	p.Success = x.(*llm.ChatResponse)
}

func (p *StreamMessageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StreamMessageResult) GetResult() interface{} {
	return p.Success
}

func getHistoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(llm.GetHistoryRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(llm.LlmService).GetHistory(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetHistoryArgs:
		success, err := handler.(llm.LlmService).GetHistory(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetHistoryResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetHistoryArgs() interface{} {
	return &GetHistoryArgs{}
}

func newGetHistoryResult() interface{} {
	return &GetHistoryResult{}
}

type GetHistoryArgs struct {
	Req *llm.GetHistoryRequest
}

func (p *GetHistoryArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(llm.GetHistoryRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetHistoryArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetHistoryArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetHistoryArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetHistoryArgs) Unmarshal(in []byte) error {
	msg := new(llm.GetHistoryRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetHistoryArgs_Req_DEFAULT *llm.GetHistoryRequest

func (p *GetHistoryArgs) GetReq() *llm.GetHistoryRequest {
	if !p.IsSetReq() {
		return GetHistoryArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetHistoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetHistoryArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetHistoryResult struct {
	Success *llm.GetHistoryResponse
}

var GetHistoryResult_Success_DEFAULT *llm.GetHistoryResponse

func (p *GetHistoryResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(llm.GetHistoryResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetHistoryResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetHistoryResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetHistoryResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetHistoryResult) Unmarshal(in []byte) error {
	msg := new(llm.GetHistoryResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetHistoryResult) GetSuccess() *llm.GetHistoryResponse {
	if !p.IsSetSuccess() {
		return GetHistoryResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetHistoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*llm.GetHistoryResponse)
}

func (p *GetHistoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetHistoryResult) GetResult() interface{} {
	return p.Success
}

func deleteHistoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(llm.DeleteHistoryRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(llm.LlmService).DeleteHistory(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteHistoryArgs:
		success, err := handler.(llm.LlmService).DeleteHistory(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteHistoryResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteHistoryArgs() interface{} {
	return &DeleteHistoryArgs{}
}

func newDeleteHistoryResult() interface{} {
	return &DeleteHistoryResult{}
}

type DeleteHistoryArgs struct {
	Req *llm.DeleteHistoryRequest
}

func (p *DeleteHistoryArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(llm.DeleteHistoryRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteHistoryArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteHistoryArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteHistoryArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteHistoryArgs) Unmarshal(in []byte) error {
	msg := new(llm.DeleteHistoryRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteHistoryArgs_Req_DEFAULT *llm.DeleteHistoryRequest

func (p *DeleteHistoryArgs) GetReq() *llm.DeleteHistoryRequest {
	if !p.IsSetReq() {
		return DeleteHistoryArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteHistoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteHistoryArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteHistoryResult struct {
	Success *llm.DeleteHistoryResponse
}

var DeleteHistoryResult_Success_DEFAULT *llm.DeleteHistoryResponse

func (p *DeleteHistoryResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(llm.DeleteHistoryResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteHistoryResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteHistoryResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteHistoryResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteHistoryResult) Unmarshal(in []byte) error {
	msg := new(llm.DeleteHistoryResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteHistoryResult) GetSuccess() *llm.DeleteHistoryResponse {
	if !p.IsSetSuccess() {
		return DeleteHistoryResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteHistoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*llm.DeleteHistoryResponse)
}

func (p *DeleteHistoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteHistoryResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SendMessage(ctx context.Context, Req *llm.ChatRequest) (r *llm.ChatResponse, err error) {
	var _args SendMessageArgs
	_args.Req = Req
	var _result SendMessageResult
	if err = p.c.Call(ctx, "SendMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) StreamMessage(ctx context.Context, req *llm.ChatRequest) (LlmService_StreamMessageClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "StreamMessage", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &llmServiceStreamMessageClient{res.Stream}

	if err := stream.Stream.SendMsg(req); err != nil {
		return nil, err
	}
	if err := stream.Stream.Close(); err != nil {
		return nil, err
	}
	return stream, nil
}

func (p *kClient) GetHistory(ctx context.Context, Req *llm.GetHistoryRequest) (r *llm.GetHistoryResponse, err error) {
	var _args GetHistoryArgs
	_args.Req = Req
	var _result GetHistoryResult
	if err = p.c.Call(ctx, "GetHistory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteHistory(ctx context.Context, Req *llm.DeleteHistoryRequest) (r *llm.DeleteHistoryResponse, err error) {
	var _args DeleteHistoryArgs
	_args.Req = Req
	var _result DeleteHistoryResult
	if err = p.c.Call(ctx, "DeleteHistory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
